// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package utils

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils(in *jlexer.Lexer, out *ApiResponseWOData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(ApiError)
				}
				(*out.Error).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils(out *jwriter.Writer, in ApiResponseWOData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		if in.Error == nil {
			out.RawString("null")
		} else {
			(*in.Error).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiResponseWOData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiResponseWOData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiResponseWOData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiResponseWOData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils(l, v)
}
func easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils1(in *jlexer.Lexer, out *ApiResponseRaw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Data).UnmarshalJSON(data))
				}
			}
		case "error":
			if m, ok := out.Error.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Error.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Error = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils1(out *jwriter.Writer, in ApiResponseRaw) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Data).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		if m, ok := in.Error.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Error.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Error))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiResponseRaw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiResponseRaw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiResponseRaw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiResponseRaw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils1(l, v)
}
func easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils2(in *jlexer.Lexer, out *ApiResponseData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils2(out *jwriter.Writer, in ApiResponseData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiResponseData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiResponseData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiResponseData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiResponseData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils2(l, v)
}
func easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils3(in *jlexer.Lexer, out *ApiResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(ApiResponseData)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(ApiError)
				}
				(*out.Error).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils3(out *jwriter.Writer, in ApiResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil {
			out.RawString("null")
		} else {
			(*in.Data).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		if in.Error == nil {
			out.RawString("null")
		} else {
			(*in.Error).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils3(l, v)
}
func easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils4(in *jlexer.Lexer, out *ApiError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils4(out *jwriter.Writer, in ApiError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1e840bfEncodeGithubComAnilibriaAliceInternalUtils4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1e840bfDecodeGithubComAnilibriaAliceInternalUtils4(l, v)
}
